@using GestaoPiscina.Client.Services
@inject AuthService AuthService

@if (isAuthorized)
{
    @ChildContent
}
else
{
    @if (!string.IsNullOrEmpty(NotAuthorized))
    {
        <div class="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
            <div class="flex">
                <svg class="w-5 h-5 text-yellow-400 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                </svg>
                <div class="ml-3">
                    <p class="text-sm text-yellow-800">@NotAuthorized</p>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? NotAuthorized { get; set; } = "Você não tem permissão para acessar este recurso.";
    [Parameter] public string? Permission { get; set; }
    [Parameter] public string[]? Permissions { get; set; }

    private bool isAuthorized = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthorization();
    }

    protected override async Task OnParametersSetAsync()
    {
        await CheckAuthorization();
    }

    private async Task CheckAuthorization()
    {
        if (string.IsNullOrEmpty(Permission) && (Permissions == null || Permissions.Length == 0))
        {
            // Se não especificou permissão, apenas verifica se está autenticado
            isAuthorized = await AuthService.IsAuthenticatedAsync();
        }
        else if (!string.IsNullOrEmpty(Permission))
        {
            // Verifica permissão específica
            isAuthorized = await AuthService.HasPermissionAsync(Permission);
        }
        else if (Permissions != null && Permissions.Length > 0)
        {
            // Verifica se tem pelo menos uma das permissões
            isAuthorized = await AuthService.HasAnyPermissionAsync(Permissions);
        }
    }
} 