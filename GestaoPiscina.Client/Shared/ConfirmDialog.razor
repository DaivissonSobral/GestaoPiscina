@if (IsVisible)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-slate-800 rounded-xl p-6 w-full max-w-md mx-4">
            <div class="flex items-center mb-4">
                <div class="flex-shrink-0 w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
                    <i class="fas fa-exclamation-triangle text-red-600"></i>
                </div>
                <div class="ml-3">
                    <h3 class="text-lg font-semibold text-slate-100">@Title</h3>
                </div>
            </div>
            
            <div class="mb-6">
                <p class="text-slate-300">@Message</p>
            </div>
            
            <div class="flex space-x-3">
                <button @onclick="Confirm" class="flex-1 bg-red-600 hover:bg-red-500 px-4 py-2 rounded-lg text-white transition-colors">
                    @ConfirmText
                </button>
                <button @onclick="Cancel" class="flex-1 bg-slate-600 hover:bg-slate-500 px-4 py-2 rounded-lg text-white transition-colors">
                    Cancelar
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string Title { get; set; } = "Confirmar Exclus√£o";
    [Parameter] public string Message { get; set; } = "Tem certeza que deseja excluir este item?";
    [Parameter] public string ConfirmText { get; set; } = "Excluir";
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }

    private async Task Confirm()
    {
        await OnConfirm.InvokeAsync();
        await Close();
    }

    private async Task Cancel()
    {
        await Close();
    }

    private async Task Close()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(false);
    }
} 