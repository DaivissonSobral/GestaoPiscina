@if (IsVisible)
{
    <div class="fixed top-4 right-4 z-[9999] bg-green-600 text-white px-6 py-4 rounded-lg shadow-lg max-w-sm" style="position: fixed; top: 1rem; right: 1rem; z-index: 9999;">
        <div class="flex items-center space-x-3">
            <i class="fas fa-check-circle text-green-200"></i>
            <div class="flex-1">
                <h4 class="font-semibold">@Title</h4>
                <p class="text-sm opacity-90">@Message</p>
            </div>
            <button @onclick="Close" class="text-green-200 hover:text-white">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Message { get; set; } = "";
    [Parameter] public string Type { get; set; } = "info";
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int AutoHideDelay { get; set; } = 4000;

    private Timer? _autoHideTimer;

    protected override void OnAfterRender(bool firstRender)
    {
        if (IsVisible && AutoHideDelay > 0)
        {
            // Cancelar timer anterior se existir
            _autoHideTimer?.Dispose();
            
            // Iniciar novo timer
            _autoHideTimer = new Timer(async _ =>
            {
                await InvokeAsync(async () =>
                {
                    await Close();
                    StateHasChanged();
                });
            }, null, AutoHideDelay, Timeout.Infinite);
        }
    }

    private async Task Close()
    {
        // Cancelar timer se existir
        _autoHideTimer?.Dispose();
        _autoHideTimer = null;
        
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(false);
    }

    public void Dispose()
    {
        _autoHideTimer?.Dispose();
    }
} 