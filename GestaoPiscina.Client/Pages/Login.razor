@page "/login"
@layout LoginLayout
@using GestaoPiscina.Client.Models
@using GestaoPiscina.Client.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login - Gestão Piscinas</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 flex items-center justify-center p-4">
    <div class="max-w-md">
        <!-- Logo/Header -->
        <div class="text-center mb-6">
            
            <h1 class="text-xl font-bold text-gray-900 mb-2">Gestão Piscinas</h1>
            <p class="text-gray-600 text-sm">Faça login para acessar o sistema</p>
        </div>

        <!-- Formulário de Login -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <EditForm Model="@loginRequest" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
                        
                        <p class="text-sm text-red-800">@errorMessage</p>
                    </div>
                }

                <!-- Campo Login -->
                <div class="mb-4">
                    <label for="login" class="block text-sm font-medium text-gray-700 mb-2">
                        Login
                    </label>
                    
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none w-5 h-5">
                            <svg class="h-5 w-5 text-gray-400 shrink-0" 
                            width="16" 
                            height="16"
                                fill="currentColor" 
                                viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"/>
                            </svg>
                        </div>
                        <InputText id="login" 
                                  @bind-Value="loginRequest.Login" 
                                  class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                  placeholder="Digite seu login" />
                    </div>
                    
                    <ValidationMessage For="@(() => loginRequest.Login)" class="text-red-600 text-sm mt-1" />
                </div>

                <!-- Campo Senha -->
                <div class="mb-4">
                    <label for="senha" class="block text-sm font-medium text-gray-700 mb-2">
                        Senha
                    </label>
                    
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none w-5 h-5">
                            <svg class="h-5 w-5 text-gray-400 shrink-0" 
                            width="16" 
                            height="16"
                                fill="currentColor" 
                                viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"/>
                            </svg>
                        </div>
                        <InputText type="password" 
                                  id="senha" 
                                  @bind-Value="loginRequest.Senha" 
                                  class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                  placeholder="Digite sua senha" />
                        <ValidationMessage For="@(() => loginRequest.Login)" class="text-red-600 text-sm mt-1" />
                    </div>

                </div>

                <!-- Botão de Login -->
                <button type="submit" 
                        disabled="@isLoading"
                        class="flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed">
                    @if (isLoading)
                    {
                        <svg class="animate-spin -ml-1 mr-3 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>

                        <span>Entrando...</span>
                    }
                    else
                    {
                        <span>Entrar</span>
                    }
                </button>
            </EditForm>

            <!-- Links de Ajuda -->
            <div class="mt-6 text-center">
                <a href="#" class="text-sm text-blue-600 hover:text-blue-500">
                    Esqueceu sua senha?
                </a>
            </div>
        </div>

        <!-- Footer -->
        <div class="text-center mt-6">
            <p class="text-sm text-gray-500">
                © 2025 Gestão Piscinas. Todos os direitos reservados.
            </p>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Verificar se já está logado
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var result = await AuthService.LoginAsync(loginRequest);

            if (result.Sucesso)
            {
                // Login bem-sucedido
                await JSRuntime.InvokeVoidAsync("console.log", "Login realizado com sucesso");
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = result.Mensagem ?? "Erro no login";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro de conexão: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
} 